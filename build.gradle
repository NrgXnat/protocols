/*
 * protocols: build.gradle
 * XNAT http://www.xnat.org
 * Copyright (c) 2017, Washington University School of Medicine
 * All Rights Reserved
 *
 * Released under the Simplified BSD.
 */

import org.gradle.internal.jvm.Jvm

buildscript {
    ext {
        vXnat = '1.7.4-SNAPSHOT'
    }
    repositories {
        mavenLocal()
        mavenCentral()
        jcenter()
        maven {
            url 'https://nrgxnat.jfrog.io/nrgxnat/libs-release'
            name 'XNAT Release Repository'
        }
        maven {
            url 'https://nrgxnat.jfrog.io/nrgxnat/libs-snapshot'
            name 'XNAT Snapshot Repository'
        }
    }
    dependencies {
        classpath "io.spring.gradle:dependency-management-plugin:1.0.3.RELEASE"
        classpath "org.nrg.xnat.build:xnat-data-builder:${vXnat}"
    }
    configurations {
        all*.exclude group: 'avalon-framework'
        all*.exclude group: 'avalon-logkit'
        all*.exclude group: 'com.metaparadigm'
        all*.exclude group: 'com.sun.mail'
        all*.exclude group: 'excalibur-component'
        all*.exclude group: 'excalibur-instrument'
        all*.exclude group: 'excalibur-logger'
        all*.exclude group: 'excalibur-pool'
        all*.exclude group: 'fop'
        all*.exclude group: 'geronimo-spec'
        all*.exclude group: 'hsqldb'
        all*.exclude group: 'imagej'
        all*.exclude group: 'jamon'
        all*.exclude group: 'jakarta-regexp'
        all*.exclude group: 'org.apache.geronimo.specs'
        all*.exclude group: 'velocity'
        all*.exclude group: 'xmlrpc'
        all*.exclude group: 'ant', module: 'ant'
        all*.exclude group: 'commons-email', module: 'commons-email'
        all*.exclude group: 'edu.ucar', module: 'netcdf'
        all*.exclude group: 'javax.jms', module: 'jms'
        all*.exclude group: 'javax.mail', module: 'mail'
        all*.exclude group: 'javax.servlet', module: 'servlet-api'
        all*.exclude group: 'javax.sql', module: 'jdbc-stdext'
        all*.exclude group: 'javax.transaction', module: 'jta'
        all*.exclude group: 'jdbc', module: 'jdbc'
        all*.exclude group: 'jms', module: 'jms'
        all*.exclude group: 'jython', module: 'jython'
        all*.exclude group: 'org.nrg', module: 'nrg'
        all*.exclude group: 'net.sf.saxon', module: 'saxon'
        all*.exclude group: 'stax', module: 'stax-api'
        all*.exclude group: 'xml-apis', module: 'xml-apis'
        all*.exclude module: 'commons-beanutils-core'
        all*.exclude module: 'log4j-slf4j-impl'
        all*.exclude module: 'pipelineCNDAXNAT'
        all*.exclude module: 'slf4j-simple'
    }
}

group 'org.nrg.xnat.protocol'
version '1.0.0-SNAPSHOT'

apply plugin: 'io.spring.dependency-management'
apply plugin: 'groovy'
apply plugin: 'java'
apply plugin: 'maven'
apply plugin: 'maven-publish'
apply plugin: 'idea'
apply plugin: 'eclipse'

repositories {
    mavenLocal()
    maven {
        url "http://maven.imagej.net/content/groups/public"
        name "ImageJ Maven Repository"
    }
    jcenter()
    mavenCentral()
    maven {
        url "https://nrgxnat.jfrog.io/nrgxnat/libs-release"
        name "XNAT Release Repository"
    }
    maven {
        url "https://nrgxnat.jfrog.io/nrgxnat/libs-snapshot"
        name "XNAT Snapshot Repository"
    }
}

sourceCompatibility = 1.7
targetCompatibility = 1.7

dependencyManagement.imports {
    mavenBom "org.nrg:parent:${vXnat}"
}

dependencies {
    implementation("org.nrg.xnat:web") {
        transitive = false
    }
    implementation("org.nrg.xnat:xnat-data-models") {
        transitive = false
    }
    implementation("org.nrg.xdat:core") {
        transitive = false
    }
    implementation "org.nrg:notify"
    implementation "org.nrg:prefs"
    implementation "org.nrg:config"
    implementation "org.nrg:framework"

    implementation "org.reflections:reflections"
    implementation "javax.servlet:javax.servlet-api"

    implementation(group: 'turbine', name: 'turbine', version: '2.3.3') {
        transitive = false
    }
    implementation(group: 'org.apache.velocity', name: 'velocity', version: '1.7') {
        transitive = false
    }
    implementation(group: 'stratum', name: 'stratum', version: '1.0') {
        transitive = false
    }
    implementation(group: 'ecs', name: 'ecs', version: '1.4.2') {
        transitive = false
    }

    implementation "commons-fileupload:commons-fileupload"
    implementation "org.restlet:org.restlet"
    implementation "org.quartz-scheduler:quartz"
    implementation "org.springframework:spring-webmvc"
    implementation "org.springframework:spring-context-support"
    implementation "org.springframework:spring-context"
    implementation "org.springframework.security:spring-security-acl"
    implementation "org.springframework.security:spring-security-aspects"
    implementation "org.springframework.security:spring-security-config"
    implementation "org.springframework.security:spring-security-ldap"
    implementation "org.springframework.security:spring-security-taglibs"
    implementation "io.springfox:springfox-swagger2"
    implementation "io.springfox:springfox-swagger-ui"
    implementation "org.codehaus.groovy:groovy-all"
    testImplementation "junit:junit"
    testImplementation "org.springframework:spring-test"
    testImplementation "org.hamcrest:hamcrest-library"
    testImplementation "javax.servlet:javax.servlet-api"
    testImplementation "com.h2database:h2"
    implementation "log4j:log4j"
}

def javaVersion = Jvm.current().javaVersion
if (javaVersion.java8Compatible || javaVersion.java9Compatible) {
    if (hasProperty("rt.17.jar")) {
        // Solution for bootstrap classpath warning and possible issues with compatibility with 1.7 libraries
        // was taken from this post on discuss.gradle.org: http://bit.ly/24xD9j0
        def rt17jar = property "rt.17.jar"
        logger.info "Using ${rt17jar} as the bootstrap class path jar."
        gradle.projectsEvaluated {
            tasks.withType(JavaCompile) {
                options.fork = true
                options.compilerArgs << "-XDignore.symbol.file"
                options.bootClasspath = rt17jar
            }
        }
    } else {
        logger.warn "No value was set for the rt.17.jar build property, but you are using a Java 8- or 9-compatible JDK. You should consider setting rt.17.jar to indicate a jar file containing the Java 1.7 run-time library:\n"
        logger.warn "\n"
        logger.warn "  ./gradlew -Prt.17.jar=rt-1.7.0_45.jar war\n"
        logger.warn "\n"
        logger.warn "You can also set this property in a gradle.properties file, either in the top level of your build folder or in the folder ~/.gradle/:\n"
        logger.warn "\n"
        logger.warn "  rt.17.jar=/home/developer/.gradle/rt.17.jar\n"
        logger.warn "\n"
        logger.warn "In some isolated instances, using a bootstrap library from a JDK version later than 1.7 can result in run-time errors.\n"
    }
} else if (!javaVersion.java7Compatible) {
    throw new BuildCancelledException("You are using a JDK version (${javaVersion}) that is not compatible with Java 7. The XNAT build will fail. Please install a JDK version of Java 7 or later.")
}

configurations {
    all*.exclude group: 'avalon-framework'
    all*.exclude group: 'avalon-logkit'
    all*.exclude group: 'com.metaparadigm'
    all*.exclude group: 'com.sun.mail'
    all*.exclude group: 'excalibur-component'
    all*.exclude group: 'excalibur-instrument'
    all*.exclude group: 'excalibur-logger'
    all*.exclude group: 'excalibur-pool'
    all*.exclude group: 'fop'
    all*.exclude group: 'geronimo-spec'
    all*.exclude group: 'hsqldb'
    all*.exclude group: 'imagej'
    all*.exclude group: 'jamon'
    all*.exclude group: 'jakarta-regexp'
    all*.exclude group: 'org.apache.geronimo.specs'
    all*.exclude group: 'velocity'
    all*.exclude group: 'xmlrpc'
    all*.exclude group: 'ant', module: 'ant'
    all*.exclude group: 'commons-email', module: 'commons-email'
    all*.exclude group: 'edu.ucar', module: 'netcdf'
    all*.exclude group: 'javax.jms', module: 'jms'
    all*.exclude group: 'javax.mail', module: 'mail'
    all*.exclude group: 'javax.servlet', module: 'servlet-api'
    all*.exclude group: 'javax.sql', module: 'jdbc-stdext'
    all*.exclude group: 'javax.transaction', module: 'jta'
    all*.exclude group: 'jdbc', module: 'jdbc'
    all*.exclude group: 'jms', module: 'jms'
    all*.exclude group: 'jython', module: 'jython'
    all*.exclude group: 'org.nrg', module: 'nrg'
    all*.exclude group: 'net.sf.saxon', module: 'saxon'
    all*.exclude group: 'stax', module: 'stax-api'
    all*.exclude group: 'xml-apis', module: 'xml-apis'
    all*.exclude module: 'commons-beanutils-core'
    all*.exclude module: 'log4j-slf4j-impl'
    all*.exclude module: 'pipelineCNDAXNAT'
    all*.exclude module: 'slf4j-simple'
}

// TODO: This tells the compiler where to find source code. This isn't required in a standard build,
// but the XNAT data builder generates code from XNAT data-type schemas that the compiler needs to know about.
sourceSets {
    main {
        java {
            srcDir 'src/main/java'
            srcDir 'build/xnat-generated/src/main/java'
        }
        resources {
            srcDir 'src/main/resources'
            srcDir 'build/xnat-generated/src/main/resources'
        }
    }
}

task sourceJar(type: Jar, dependsOn: classes) {
    from sourceSets.main.allSource
}

task javadocJar(type: Jar, dependsOn: javadoc) {
    from javadoc.destinationDir
}

publishing.publications {
    mavenJava(MavenPublication) {
        from components.java

        artifact sourceJar {
            classifier "sources"
        }

        artifact javadocJar {
            classifier "javadoc"
        }

        pom.withXml {
            def root = asNode()
            root.appendNode('name', 'XNAT Visits And Protocols Plugin')
            root.appendNode('description', '')
            root.appendNode('url', 'https://github.com/nrgxnat/protocols-plugin')
            root.appendNode('inceptionYear', '2016')

            def scm = root.appendNode('scm')
            scm.appendNode('url', 'https://github.com/nrgxnat/protocols-plugin')
            scm.appendNode('connection', 'scm:https://jcleve01@github.com/nrgxnat/protocols-plugin.git')
            scm.appendNode('developerConnection', 'scm:https://jcleve01@github.com/nrgxnat/protocols-plugin.git')

            def license = root.appendNode('licenses').appendNode('license')
            license.appendNode('name', 'Simplified BSD 2-Clause License')
            license.appendNode('url', 'http://xnat.org/about/license.php')
            license.appendNode('distribution', 'repo')

            def developers = root.appendNode('developers')
            def clevelandj = developers.appendNode('developer')
            clevelandj.appendNode('id', 'clevelandj')
            clevelandj.appendNode('name', 'Justin Cleveland')
            clevelandj.appendNode('email', 'clevelandj@wustl.edu')
            def rherrick = developers.appendNode('developer')
            rherrick.appendNode('id', 'rherrick')
            rherrick.appendNode('name', 'Rick Herrick')
            rherrick.appendNode('email', 'jrherrick@wustl.edu')
        }
    }
}

publishing.repositories {
    maven {
        credentials {
            // These properties must be set in the ~/.gradle/gradle.properties file or passed on the Gradle command
            // line in the form -PrepoUsername=foo -PrepoPassword=bar.
            username propertyWithDefault('repoUsername', 'username')
            password propertyWithDefault('repoPassword', 'password')
        }
        if (project.version.endsWith('-SNAPSHOT')) {
            url "https://nrgxnat.jfrog.io/nrgxnat/libs-snapshot-local"
        } else {
            url "https://nrgxnat.jfrog.io/nrgxnat/libs-release-local"
        }
    }
}

def propertyWithDefault(String name, Object value) {
    hasProperty(name) ? property(name) : value
}
